generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    admin
    user
}

enum Magnitude {
    Masa
    Volumen
    Unidad
}

enum Route {
    L
    K
    M
    J
    V
    S
    D
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    password      String
    role          Role      @default(user)
    WorkDay       WorkDay[]
}

model Article {
    id               String            @id @default(uuid())
    name             String
    description      String?
    needsCommand     Boolean           @default(false)
    active           Boolean           @default(true)
    recipe           Recipe?
    saleItemArticles SaleItemArticle[]
}

model Recipe {
    id                 String              @id @default(uuid())
    name               String              @unique
    cost               Float
    articleId          String              @unique
    article            Article             @relation(fields: [articleId], references: [id])
    recipeInputs       RecipeInput[]
    recipePreparations RecipePreparation[]
}

model Brand {
    id   String @id @default(uuid())
    name String @unique
}

model InputCategory {
    id     String  @id @default(uuid())
    name   String  @unique
    inputs Input[]
}

model Input {
    id                String             @id @default(uuid())
    name              String             @unique
    lowerPrice        Float              @default(0)
    upperPrice        Float              @default(0)
    currentPrice      Float              @default(0)
    lastPrice         Float              @default(0)
    expectedPrice     Float              @default(0)
    stock             Float              @default(0)
    presentation      Float              @default(0)
    suggestedStock    Float              @default(0)
    currentProviderId String
    inputCategoryId   String
    inputCategory     InputCategory      @relation(fields: [inputCategoryId], references: [id])
    measureSlug       String
    providerInputs    ProviderInput[]
    preparationInputs PreparationInput[]
    recipeInputs      RecipeInput[]
}

model Provider {
    id             String          @id @default(uuid())
    name           String          @unique
    phone          String          @unique
    email          String          @unique
    routes         Route[]
    fixedExpense   Boolean         @default(false)
    providerInputs ProviderInput[]
}

model ProviderInput {
    id            String   @id @default(uuid())
    providerId    String
    inputId       String
    lowerPrice    Float    @default(0)
    upperPrice    Float    @default(0)
    currentPrice  Float    @default(0)
    lastPrice     Float    @default(0)
    expectedPrice Float    @default(0)
    presentation  Float    @default(0)
    measureSlug   String
    provider      Provider @relation(fields: [providerId], references: [id])
    input         Input    @relation(fields: [inputId], references: [id])
}

model Preparation {
    id                 String              @id @default(uuid())
    name               String              @unique
    measureSlug        String
    cost               Float
    presentation       Int
    preparationInputs  PreparationInput[]
    recipePreparations RecipePreparation[]
}

model PreparationInput {
    id            String      @id @default(uuid())
    preparationId String
    inputId       String
    quantity      Float
    measureSlug   String
    preparation   Preparation @relation(fields: [preparationId], references: [id])
    input         Input       @relation(fields: [inputId], references: [id])
}

model RecipeInput {
    id          String @id @default(uuid())
    recipeId    String
    inputId     String
    quantity    Float
    measureSlug String
    recipe      Recipe @relation(fields: [recipeId], references: [id])
    input       Input  @relation(fields: [inputId], references: [id])
}

model RecipePreparation {
    id            String      @id @default(uuid())
    recipeId      String
    preparationId String
    quantity      Float
    measureSlug   String
    recipe        Recipe      @relation(fields: [recipeId], references: [id])
    preparation   Preparation @relation(fields: [preparationId], references: [id])
}

model SaleItem {
    id                 String            @id @default(uuid())
    name               String            @unique
    saleItemCategoryId String
    price              Int
    saleItemCategory   SaleItemCategory  @relation(fields: [saleItemCategoryId], references: [id])
    saleItemArticles   SaleItemArticle[]
}

model SaleItemCategory {
    id        String     @id @default(uuid())
    name      String     @unique
    saleItems SaleItem[]
}

model SaleItemArticle {
    id         String   @id @default(uuid())
    saleItemId String
    articleId  String
    quantity   Float
    saleItem   SaleItem @relation(fields: [saleItemId], references: [id])
    article    Article  @relation(fields: [articleId], references: [id])
}

model Budget {
    id                  String @id @default(uuid())
    goal                Int
    upperGoal           Int
    lowerGoal           Int
    month               Int
    year                Int
    fixedExpense        Int
    inventoryPercentage Int
    expectedProfit      Int
}

model WorkDay {
    id          String   @id @default(uuid())
    date        DateTime @default(now())
    initialCash Int
    finalCash   Int
    sales       Int
    expenses    Int
    diference   Int
    closed      Boolean
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}
