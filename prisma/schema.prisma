// config 

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums--------------------------------------

enum Role {
    admin
    user
}

enum Magnitude {
    Masa
    Volumen
    Unidad
}

enum Route {
    L
    K
    M
    J
    V
    S
    D
}

enum DeliveryMethod {
    Mesa
    Domicilio
    Recoger
}

// models--------------------------------------


model RoomTable {
    id     String  @id @default(uuid())
    posX   Int
    posY   Int
    number Int
    type   String
    inUse  Boolean @default(false)
}

model AccountHistory {
    id                 String               @id @default(uuid())
    amount             Int
    previousBalance    Int
    currentBalance     Int
    pay                Boolean
    payMethodId        String
    PayMethod          PayMethod            @relation(fields: [payMethodId], references: [id])
    BillAccountHistory BillAccountHistory[]
}

model BillAccountHistory {
    id               String          @id @default(uuid())
    billId           String
    accountHistoryId String
    bill             Bill            @relation(fields: [billId], references: [id])
    accountHistory   AccountHistory? @relation(fields: [accountHistoryId], references: [id])
}

model Account {
    id          String      @id @default(uuid())
    name        String      @unique
    description String?
    active      Boolean     @default(true)
    cash        Boolean     @default(false)
    payMethods  PayMethod[]
}

model PayMethod {
    id             String           @id @default(uuid())
    name           String           @unique
    accountId      String
    active         Boolean          @default(true)
    commission     Int              @default(0)
    isPublic       Boolean          @default(false)
    isSemiPublic   Boolean          @default(false)
    Account        Account          @relation(fields: [accountId], references: [id])
    AccountHistory AccountHistory[]
}

model Customer {
    id          String    @id @default(uuid())
    name        String
    phone       String    @unique
    email       String
    idNumber    String
    creditState Boolean   @default(false)
    creditLimit Int       @default(0)
    addresses   Address[]
}

model Address {
    id          String   @id @default(uuid())
    description String
    customerId  String
    Customer    Customer @relation(fields: [customerId], references: [id])
}

model Menu {
    id                   String                 @id @default(uuid())
    name                 String
    commissionPercentage Int                    @default(0)
    itemPrices           ItemPrice[]
    elementPrices        ElementPrice[]
    ArticleModifierPrice ArticleModifierPrice[]
}

model ItemPrice {
    id         String   @id @default(uuid())
    price      Int
    menuId     String
    saleItemId String
    menu       Menu     @relation(fields: [menuId], references: [id])
    saleItem   SaleItem @relation(fields: [saleItemId], references: [id])
}

model ElementPrice {
    id                String          @id @default(uuid())
    price             Int
    modifierElementId String
    menuId            String
    menu              Menu            @relation(fields: [menuId], references: [id])
    modifierElement   ModifierElement @relation(fields: [modifierElementId], references: [id])
}

model ArticleModifierPrice {
    id                String               @id @default(uuid())
    price             Int
    articleModifierId String
    menuId            String
    menu              Menu                 @relation(fields: [menuId], references: [id])
    articleModifier   ArticleModifierGroup @relation(fields: [articleModifierId], references: [id])
}

model ArticleModifierGroup {
    id              String                 @id @default(uuid())
    articleId       String
    modifierGroupId String
    order           Int
    minSelect       Int
    maxSelect       Int
    priceByGroup    Boolean
    article         Article                @relation(fields: [articleId], references: [id])
    modifierGroup   ModifierGroup          @relation(fields: [modifierGroupId], references: [id])
    prices          ArticleModifierPrice[]
}

model ModifierGroup {
    id                   String                 @id @default(uuid())
    name                 String
    showLabel            Boolean                @default(false)
    ArticleModifierGroup ArticleModifierGroup[]
    elements             ModifierElement[]
}

model ModifierElement {
    id                        String         @id @default(uuid())
    name                      String
    defaultRecipeId           String
    combinable                Boolean
    combinableModifierGroupId String
    modifierGroupId           String
    prices                    ElementPrice[]
    ModifierGroup             ModifierGroup  @relation(fields: [modifierGroupId], references: [id])
}

model Bill {
    id             String               @id @default(uuid())
    closed         Boolean              @default(false)
    tableNumber    Int
    deliveryMethod DeliveryMethod
    clientId       String
    addressId      String
    openWorkDayId  String
    closeWorkDayId String
    commandTime    DateTime
    isNull         Boolean              @default(false)
    menuId         String
    isServed       Boolean              @default(false)
    isCredit       Boolean              @default(false)
    items          BillItem[]
    histories      BillAccountHistory[]
}

model BillItem {
    id             String                  @id @default(uuid())
    description    String
    quantity       Int
    unitPrice      Int
    discount       Int
    tax            Int
    billId         String
    saleItemId     String
    kitchenMessage Boolean                 @default(false)
    itemArticles   BillItemLinkedArticle[]
    Bill           Bill                    @relation(fields: [billId], references: [id])
}

model BillItemLinkedArticle {
    id                String          @id @default(uuid())
    billItemId        String
    itemNumber        Int
    saleItemArticleId String
    combined          Boolean         @default(false)
    description       String
    linkedArticles    LinkedArticle[]
    BillItem          BillItem        @relation(fields: [billItemId], references: [id])
}

model LinkedArticle {
    id            String                  @id @default(uuid())
    name          String
    unitPrice     Int
    isCommanded   Boolean                 @default(false)
    articleId     String
    billArticleId String
    modifiers     LinkedArticleModifier[]
    BillItem      BillItemLinkedArticle   @relation(fields: [billArticleId], references: [id])
}

model LinkedArticleModifier {
    id              String                         @id @default(uuid())
    linkedArticleId String
    quantity        Int
    maxSelect       Int
    minSelect       Int
    showLabel       Boolean                        @default(false)
    name            String
    modifierGroupId String
    elements        LinkedArticleModifierElement[]
    LinkedArticle   LinkedArticle                  @relation(fields: [linkedArticleId], references: [id])
}

model LinkedArticleModifierElement {
    id                      String                @id @default(uuid())
    name                    String
    price                   Int
    quantity                Int
    linkedArticleModifierId String
    modifierElementId       String
    LinkedArticleModifier   LinkedArticleModifier @relation(fields: [linkedArticleModifierId], references: [id])
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    password      String
    role          Role      @default(user)
    workDays      WorkDay[]
}

model Article {
    id               String                 @id @default(uuid())
    name             String
    description      String?
    needsCommand     Boolean                @default(false)
    active           Boolean                @default(true)
    recipe           Recipe?
    saleItemArticles SaleItemArticle[]
    articleModifiers ArticleModifierGroup[]
}

model Recipe {
    id                 String              @id @default(uuid())
    name               String              @unique
    cost               Float
    articleId          String              @unique
    article            Article             @relation(fields: [articleId], references: [id])
    recipeInputs       RecipeInput[]
    recipePreparations RecipePreparation[]
}

model Brand {
    id   String @id @default(uuid())
    name String @unique
}

model InputCategory {
    id     String  @id @default(uuid())
    name   String  @unique
    inputs Input[]
}

model Input {
    id                String             @id @default(uuid())
    name              String             @unique
    lowerPrice        Float              @default(0)
    upperPrice        Float              @default(0)
    currentPrice      Float              @default(0)
    lastPrice         Float              @default(0)
    expectedPrice     Float              @default(0)
    stock             Float              @default(0)
    presentation      Float              @default(0)
    suggestedStock    Float              @default(0)
    currentProviderId String
    inputCategoryId   String
    inputCategory     InputCategory      @relation(fields: [inputCategoryId], references: [id])
    measureSlug       String
    providerInputs    ProviderInput[]
    preparationInputs PreparationInput[]
    recipeInputs      RecipeInput[]
}

model Provider {
    id             String          @id @default(uuid())
    name           String          @unique
    phone          String          @unique
    email          String          @unique
    routes         Route[]
    fixedExpense   Boolean         @default(false)
    providerInputs ProviderInput[]
}

model ProviderInput {
    id            String   @id @default(uuid())
    providerId    String
    inputId       String
    lowerPrice    Float    @default(0)
    upperPrice    Float    @default(0)
    currentPrice  Float    @default(0)
    lastPrice     Float    @default(0)
    expectedPrice Float    @default(0)
    presentation  Float    @default(0)
    measureSlug   String
    provider      Provider @relation(fields: [providerId], references: [id])
    input         Input    @relation(fields: [inputId], references: [id])
}

model Preparation {
    id                 String              @id @default(uuid())
    name               String              @unique
    measureSlug        String
    cost               Float
    presentation       Int
    preparationInputs  PreparationInput[]
    recipePreparations RecipePreparation[]
}

model PreparationInput {
    id            String      @id @default(uuid())
    preparationId String
    inputId       String
    quantity      Float
    measureSlug   String
    preparation   Preparation @relation(fields: [preparationId], references: [id])
    input         Input       @relation(fields: [inputId], references: [id])
}

model RecipeInput {
    id          String @id @default(uuid())
    recipeId    String
    inputId     String
    quantity    Float
    measureSlug String
    recipe      Recipe @relation(fields: [recipeId], references: [id])
    input       Input  @relation(fields: [inputId], references: [id])
}

model RecipePreparation {
    id            String      @id @default(uuid())
    recipeId      String
    preparationId String
    quantity      Float
    measureSlug   String
    recipe        Recipe      @relation(fields: [recipeId], references: [id])
    preparation   Preparation @relation(fields: [preparationId], references: [id])
}

model SaleItem {
    id                 String            @id @default(uuid())
    name               String            @unique
    saleItemCategoryId String
    saleItemCategory   SaleItemCategory  @relation(fields: [saleItemCategoryId], references: [id])
    saleItemArticles   SaleItemArticle[]
    prices             ItemPrice[]
}

model SaleItemCategory {
    id        String     @id @default(uuid())
    name      String     @unique
    saleItems SaleItem[]
}

model SaleItemArticle {
    id         String   @id @default(uuid())
    saleItemId String
    articleId  String
    quantity   Float
    saleItem   SaleItem @relation(fields: [saleItemId], references: [id])
    article    Article  @relation(fields: [articleId], references: [id])
}

model Budget {
    id                  String @id @default(uuid())
    goal                Int
    upperGoal           Int
    lowerGoal           Int
    month               Int
    year                Int
    fixedExpense        Int
    inventoryPercentage Int
    expectedProfit      Int
}

model WorkDay {
    id          String   @id @default(uuid())
    date        DateTime @default(now())
    initialCash Int
    finalCash   Int
    sales       Int
    expenses    Int
    diference   Int
    closed      Boolean
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}
